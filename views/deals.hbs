{{#contentFor "head"}}
  <style>
    @import url('https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.4.0/min/dropzone.min.css');
    .sortable {
      padding: 0;
      -webkit-touch-callout: none;
      -webkit-user-select: none;
      -khtml-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
    }
    .sortable li {
      float: left;
      width: 120px;
      height: 120px;
      overflow:hidden;
      border:1px dashed #ccc;
      text-align: center;
      margin:5px;
    }
    li.sortable-placeholder {
      border: 1px dashed #CCC;
      background: none;
    }
    .dropzone { border: 1px dashed #CCC; }
    .dz-preview > img {
      height: 120px;
      object-fit: cover;
    }
    .delete-img{
      color: #000;
      text-decoration: none;
    }
    .dz-remove{
      position:absolute;
      top:0;
      right:0;
      color: #000;
      text-decoration: none;
      margin-right:5px;
    }
  </style>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.11.2/jquery-ui.js"></script>
  <script src="https://sdk.amazonaws.com/js/aws-sdk-2.187.0.min.js"></script>
  <script>
    var albumBucketName = '{{ bucketName }}'; // upload bucket
    var bucketRegion = '{{ region }}';
    var IdentityPoolId = '{{ identityPoolId }}';
    var albumName = '{{ pid }}';
    AWS.config.update({
      region: bucketRegion,
      credentials: new AWS.CognitoIdentityCredentials({
        IdentityPoolId: IdentityPoolId
      })
    });
    var s3 = new AWS.S3({
      apiVersion: '2006-03-01',
      params: {Bucket: albumBucketName}
    });
    var s3Dest = new AWS.S3({
      apiVersion: '2006-03-01',
      params: {Bucket: 'www.batteryharris.com'}
    });    
  </script>

{{/contentFor}}

<form action="/upload" class="dropzone" drop-zone="" id="file-dropzone"></form>
<ul class="visualizacao sortable dropzone-previews"></ul>

<div class="preview" style="display:none;">
  <li style="position:relative;">
    <div>
      <div class="dz-preview dz-file-preview">
        <img data-dz-thumbnail />
        <div class="dz-progress"><span class="dz-upload" data-dz-uploadprogress></span></div>
        <div class="dz-success-mark"><span>✔</span></div>
        <div class="dz-error-mark"><a href="#" class="delete-img">✘</a></div>
        <div class="dz-error-message"><span data-dz-errormessage></span></div>
      </div>
    </div>
    <a class="dz-remove" href="#">x</a>
  </li>  
</div>

{{#contentFor "footer"}}
<script>
  var myDropZone;
  $(document).ready(function(){

    $(document).on("click", "#pipedrive-dup-link", function (e) {
      e.preventDefault();
      e.stopPropagation();
      var r = confirm("Duplicate this deal in Pipedrive?");
      if (r == true) {
          document.getElementById('activity-indicator').style.display='block';        
          $.post( "/deals/{{pid}}/duplicate", function(data) {
            window.location.replace('/deals/'+data.id);
          })
      }
    });    
    
    $('.sortable').sortable({
      update: function( event, ui ) {
        var previewIds = $(this).sortable('toArray');
        var myFiles = getImagePathsByPreviewIds(previewIds);
        setSortOrder(myFiles);
      }
    });
        
    //DropzoneJS snippet - js
    $.getScript('https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.4.0/min/dropzone.min.js',function(){
      // instantiate the uploader
      Dropzone.autoDiscover = false;
      $('#file-dropzone').dropzone({ 
        url: "/upload",
        maxFilesize: 100,
        paramName: "uploadfile",
        maxThumbnailFilesize: 99999,
        previewsContainer: '.visualizacao', 
        previewTemplate : $('.preview').html(),
        dictDefaultMessage: "Drop image files here to upload",
        init: function() {
          this.on('completemultiple', function(file, json) {
            $('.sortable').sortable('enable');
            console.log('completemultiple');
          });
          this.on("success", function(file, response) {
            console.log('success')
            console.log(response)
            file.previewElement.id = Math.random().toString(36).split('.')[1];
          });
          this.on("processing", function (file) {
            file.previewElement.id = Math.random().toString(36).split('.')[1];
            document.getElementById('activity-indicator').style.display='block';	
            $( ".sortable" ).sortable( "disable" );
          });
          this.on("queuecomplete", function (file) {
            console.log('queuecomplete')
            document.getElementById('activity-indicator').style.display='none';
            $( ".sortable" ).sortable( "enable" );
            // update sort order
            var previewIds = $('.sortable').sortable('toArray');
            var archivos = getImagePathsByPreviewIds(previewIds);
            setSortOrder(archivos);
          });
          var mockFile = { name: "myimage.jpg", size: 12345, type: 'image/jpeg' };       
          var albumPhotosKey = albumName + '/';
          var dz = this;
          
          if ('{{imgPaths}}'.length > 0) {
            // write images in order
            '{{imgPaths}}'.split(',').map(function(path) {
              // 2/angry_unicorn.png
              var photoUrl = 'http://www.batteryharris.com/' + path;
              mockFile.name = path;
              dz.options.addedfile.call(dz, mockFile);
              dz.options.thumbnail.call(dz, mockFile, photoUrl);
              mockFile.previewElement.id = Math.random().toString(36).split('.')[1];
              mockFile.previewElement.classList.add('dz-success');
              mockFile.previewElement.classList.add('dz-complete');
            });
          } else {
            s3Dest.listObjects({Prefix: albumPhotosKey}, function(err, data) {
              if (err) {
                return alert('There was an error viewing your album: ' + err.message);
              }
              // `this` references the AWS.Response instance that represents the response
              var href = this.request.httpRequest.endpoint.href;
              var bucketUrl = href + 'www.batteryharris.com' + '/';
              var imgArry = [];
              var photos = data.Contents.map(function(photo) {
                // add to db in order loaded
                imgArry.push(photo.Key);
                var photoUrl = bucketUrl + encodeURIComponent(photo.Key);
                mockFile.name = photo.Key;
                dz.options.addedfile.call(dz, mockFile);
                dz.options.thumbnail.call(dz, mockFile, photoUrl);
                mockFile.previewElement.id = Math.random().toString(36).split('.')[1];
                mockFile.previewElement.classList.add('dz-success');
                mockFile.previewElement.classList.add('dz-complete');
              });
              setSortOrder(imgArry);              
            });
          }
          
          
        },
        sending: function(file, xhr) {
          var fileName = file.name;
          var albumPhotosKey = encodeURIComponent(albumName) + '/';
          var photoKey = albumPhotosKey + fileName;
          s3.upload({
            Key: photoKey,
            Body: file,
            ACL: 'public-read',
            ContentType: file.type
          }, function(err, data) {
            if (err) {
              return alert('There was an error uploading your photo: ', err.message);
            }
            // viewAlbum(albumName);
          });
        }
      });
      
      $(document).on("click", ".dz-remove", function (e) {
        e.preventDefault();
        e.stopPropagation();
        $(e.target).parent().remove();
        var filename = $(e.target).parent().find('img').attr('alt');
        if (filename.split('/').length==1){
          filename = albumName + '/' + filename; 
        }
        deletePhoto(filename);
        $( ".sortable" ).sortable( "refresh" );
      });
      
      viewAlbum({{{pid}}});
    });
    
  });
  
  function deletePhoto(photoKey) {
    console.log(photoKey);
    s3.deleteObject({Key: photoKey}, function(err, data) {
      s3Dest.deleteObject({Key: photoKey}, function(err, data) {
        if (err) {
          return alert('There was an error deleting your photo: ', err.message);
        }
      });      
    });
    var previewIds = $('.sortable').sortable('toArray');
    var myFiles = getImagePathsByPreviewIds(previewIds);
    setSortOrder(myFiles);
  }
  
  function viewAlbum(albumName) {
      var sidebarHTML = '';
      if ('{{errors}}'.length > 0) {
        sidebarHTML += '<p style="font-size:0.75rem;margin-top:0;color:white;background:red;padding-left:0.25rem;">Missing StreetEasy Fields</p>';
        '{{errors}}'.split(",").forEach(function (item) {
          sidebarHTML += '<p style="font-size:0.75rem;">' + item + '</p>';
        });
      } else {
        sidebarHTML += '<p style="font-size:0.75rem;margin-top:0;color:white;background:green;padding-left:0.25rem;">StreetEasy Valid</p>';          
      }
      document.getElementById('sidebar').innerHTML = sidebarHTML;
      document.getElementById('pipedrive-link').href = 'https://grandandco.pipedrive.com/deal/' + albumName;
      document.getElementById('pipedrive-link').innerHTML = '{{title}}';
      document.getElementById('pipedrive-dup-link').style.display='inline-block';
    }

    function getHtml(template) {
      return template.join('\n');
    }
  
    function getImagePathsByPreviewIds(previewIds) {
      console.log(previewIds);
      
      imgPathsArry = [];
      previewIds.map(function(pid) {
        filename = $(document.getElementById(pid)).find('img').attr('alt');
        if (filename.split('/').length==1){
          filename = '{{pid}}/' + filename; 
        }
        imgPathsArry.push(filename);
      });
      return imgPathsArry;
    }
  
    function setSortOrder(files) {
      $.post( "/sorted", { id: {{pid}}, imgPaths: files });
    }

</script>
{{/contentFor}}

<div id="app"></div> 